{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types'; //Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function (res) {\n      return history.push('/login');\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //Login - Get User Token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      //save to localStorage\n      var token = res.data.token; //set token to localStorage\n\n      localStorage.setItem('jwtToken', token); // Set token to Auth header\n\n      setAuthToken(token); //Decode token to get user data\n\n      var decoded = jwt_decode(token); //Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; //Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    //Remove token from localstorage\n    localStorage.removeItem('jwtToken'); //Remove auth header for future requests\n\n    setAuthToken(false); //Set current user to {} which will also set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n    window.location.href = '/login';\n  };\n};","map":{"version":3,"sources":["/Users/cindykathleen/MentorCrowd/mentorcrowdreact/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem","window","location","href"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C,C,CACA;;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC3DR,IAAAA,KAAK,CACAS,IADL,CACU,qBADV,EACiCH,QADjC,EAEKI,IAFL,CAEU,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFb,EAGKC,KAHL,CAGW,UAAAC,GAAG;AAAA,aACNN,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEZ,UADD;AAELa,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CADF;AAAA,KAHd;AASH,GAV2B;AAAA,CAArB,C,CAYP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACb,QAAD;AAAA,SAAc,UAAAE,QAAQ,EAAI;AAC/CR,IAAAA,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EACKI,IADL,CACU,UAAAC,GAAG,EAAI;AACT;AADS,UAEDS,KAFC,GAEST,GAAG,CAACO,IAFb,CAEDE,KAFC,EAIT;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALS,CAOT;;AACAnB,MAAAA,YAAY,CAACmB,KAAD,CAAZ,CARS,CAUT;;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B,CAXS,CAaT;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,KAhBL,EAiBKV,KAjBL,CAiBW,UAAAC,GAAG;AAAA,aACNN,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEZ,UADD;AAELa,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CADF;AAAA,KAjBd;AAuBH,GAxBwB;AAAA,CAAlB,C,CA0BP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACD,OAAD,EAAa;AACvC,SAAO;AACHR,IAAAA,IAAI,EAAEX,gBADH;AAEHY,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAjB,QAAQ,EAAI;AACxC;AACAa,IAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAFwC,CAIxC;;AACAzB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CALwC,CAOxC;;AACAO,IAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACAG,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAqB,QAArB;AACH,GAVyB;AAAA,CAAnB","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken'\nimport jwt_decode from 'jwt-decode';\n\nimport { GET_ERRORS, SET_CURRENT_USER } from './types'\n//Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post('/api/users/register', userData)\n        .then(res => history.push('/login'))\n        .catch(err => \n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n//Login - Get User Token\nexport const loginUser = (userData) => dispatch => {\n    axios.post('/api/users/login', userData)\n        .then(res => {\n            //save to localStorage\n            const { token } = res.data;\n\n            //set token to localStorage\n            localStorage.setItem('jwtToken', token);\n\n            // Set token to Auth header\n            setAuthToken(token);\n\n            //Decode token to get user data\n            const decoded = jwt_decode(token);\n\n            //Set current user\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err => \n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })    \n        );\n};\n\n//Set logged in user\nexport const setCurrentUser = (decoded) => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\n\n//Log user out\nexport const logoutUser = () => dispatch => {\n    //Remove token from localstorage\n    localStorage.removeItem('jwtToken');\n\n    //Remove auth header for future requests\n    setAuthToken(false);\n\n    //Set current user to {} which will also set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n    window.location.href='/login';\n}"]},"metadata":{},"sourceType":"module"}